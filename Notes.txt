https://github.com/avamsykiran/Angular_Apr07Apr21_09001200.git

Pre Requsites
-------------------------------
    Html 5
            Elements And Attributes
            Web Storage
            Form Elements and Validations

    Css
            Css Style Properties
            Selectors

    Bootstrap (optional)
            Grid System
            Typography
            Alerts, Crads, Navbar ..etc

    JavaScript (ES6)
            Sugar Syntax
                Moduels
                Classes
                Prototypes
                Closures
                Arrow Functions
                Tempalte Literals
            
            Promise
            Data,String,Math and Object API
            Array Prototype API

    Angular 11
    ----------------------------------------------------------------------------------------------------

        Lab Setup
            VS Code                         IDE
            NodeJS                          Development Platform        https://nodejs.org/en/
                                                    node --version
            NPM (node package manager)      Build Tool
                                                    npm --version

            Angular CLI (CmdLineInterface)  Angular Development Tool
                                                    ng --version

                                                    npm install -g @angular/cli

            Chrome                          Browser

        -=--=-=-=-=-=-=-==-=-=-=-=-=-==-=--===-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Dynamic Web Appliction

        Database <-->  [ DAL  <--> Service <--> Controller <--> View (JSP/ASP/PHP) ]  <--Html+CSS+JS---> Client

        SPA     Single Page Application

                         [ SPA                                          ]  <--Html+CSS+JS---> Client

        Database <-->  [ DAL  <--> Service <--> Controller (WebService) ]  <--Data (xml/json)---> Client

        -=--=-=-=-=-=-=-==-=-=-=-=-=-==-=--===-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Typescript
                    = Javascript (ES6) + TypeSafety.


                    Javascript
                            const sayHello = (unm) => {
                                console.log(unm.length);
                                return "Hello " + unm;
                            };

                            sayHello("Vamsy");
                            sayHello(123);
                            sayHello(true);
                            sayHello({id:1,title:"Apples",price:2345});

                    Typescript
                            const sayHello = (unm:string) => {            
                                console.log(unm.length);
                                return "Hello " + unm;
                            };
                            
                            sayHello("Vamsy");

                    DataTypes
                                any
                                string
                                number
                                boolean
                                array           []
                                void
                                undefined
                                null

                             Interface
                                = data members +
                                     absctract functions

     
        -=--=-=-=-=-=-=-==-=-=-=-=-=-==-=--===-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Angular Archetecture

                        Modules
                        Component
                        Directives
                        Pipes
                        Services
                        Gaurds
                        Interceptors

        Angular CLI Commands

                        ng new proj-name
                               .browserslistrc         list of brosers to be supproted
                               .gitignore
                                angular.json           angular cli config         
                                package.json           npm config
                                tsconfig.app.json
                                tsconfig.json          ts config
                                tslint.json            lint config
                                karma.conf.js          karma config
                                e2e                    end-to-end test cases using protractor.
                                node_modules           all dewnlaoded libraries
                                src                    source code

                        ng build
                                to compile and bundle your projects

                                vendor.js               contains all code of thrid party lib..
                                                                all angular librries
                                                                + rxjs + any other thrid party
                                                                JS lib

                                polyfills.js            support for advanced es fetures
                                                                for older browsers
                              
                                main.js                 contains the code written in this 
                                                        spa.

                                runtime.js              support for modules in older browsers

                        ng serve
                                do a continuos build and host in a dev server.
                                4200 default port for dev server.

                                ng serve --port 8989 -o

                        ng generate
                        ng g

                                ng g component componentName    --skip-tests
                                ng g module moduleName
                                ng g directive directiveName
                                ng g pipe pipeName
                                ng g service serviceName
                                ng g class className
                                ng g guard guardName
                                ng g interface interfaceName

                        ng add library-name

      -=--=-=-=-=-=-=-==-=-=-=-=-=-==-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Angular Archetecture In details

                each of the below angular resoruce is a class.
                the class is amrked with a decorator and the decorators accepts
                a few parameters called meta-data. Through these decorators
                we can recognize what resource is represented a givben class.

                        Module
                                        a logical group of component,
                                        directives,pipes,gaurds,services 
                                        and other angular modules.

                                        @NgModule({
                                                declarations:[
                                                 //list of component,directives,pipes that belong to this module.
                                                ],
                                                imports:[
                                                        //list of sub-moudles to be included in this module
                                                ],
                                                exports:[
                                                 //list of component,directives,pipes that are allowed to be used by
                                                 //other moduelss
                                                ],
                                                providers:[
                                                        //list of services and interceptors.
                                                ],
                                                bootstrap:[
                                                        //list of components whose object must be created
                                                        //immediatly after loading the module.
                                                ]
                                        })
                                        class M1{

                                        }

                                        1. an angular project can have any number of modules
                                        2. one angular proj can have only one top-level module
                                        and that top-level is called root modules and all
                                        other sub-modules are called Feature modules.
                        Component

                                        angular allows html extendability.
                                        angualr allows to define new elements in html.
                                        thats what is a component.

                                        component is a new html tag.
                                        component = Controller + Template + Style
                                                        Controller will hold state and behaviour of the component
                                                                                data and actions
                                                        Template will hold the presentation of the component
                                                        Style will hold local css of the component

                                        c1.component.ts
                                        -----------------------
                                        @Component({
                                                selector:'app-welcome',
                                                tempalteUrl:'c1.component.html',
                                                styleUrls:['c1.component.css']
                                        })
                                        class C1{
                                           title : string;
                                           constructor(){
                                                   this.title = "Hello Welcome all"; //state
                                           }
                                        }

                                        c1.component.html
                                        -----------------------------
                                        <h1>{{title}}</h1>

                                        c1.component.css
                                        ------------------------------
                                        h1{
                                                text-align:center;
                                        }

                                        <app-welcome></app-welcome>


                                        Data Binding
                                        -----------------------------------------

                                        Interpolation
                                                        {{angular-expression.}}
                                        
                                        One-Way Data Binding
                                                        [attrib]="angular-expression"

                                        Event Binding
                                                        (eventAttribute)="function()"

                                                        onclick         click
                                                        ondblclick      dblclick
                                                        onblur          blur
                                        
                                        Two Way Data Binding
                                                        
                                                        [(ngModel)]="variables"

                                                        FormsModule

                                        Style Binding

                                                        [class]="variable"
                                                        [class]="{className:true,class2:false}"

                        Directive

                                        Directive / Attribute Directives
                                                        are user-defiend html attributes .

                                        InBuilt Attribute Directives

                                                Event Directives
                                                        click
                                                        dblclick
                                                        blur
                                                        focus
                                                        change
                                                        submit
                                                        ngSubmit
                                                
                                                Structural Directives
                                                        *ngIf
                                                        *ngFor
                                                        *ngSwitch

                                                Other InBuilt Directives
                                                        ngModel
                                                        formControlName
                                                        routerLink
                                                                        .........etc.,

                                        Custome Directives
                                                @Directive({
                                                        
                                                })
                                                class D1{

                                                }

                        Pipe

                                pipes are used to tranform a given
                                value to another before rendering.

                                {{value|pipeName:param1:param2}}

                                InBuilt Pipes
                                        uppercase
                                        lowercase
                                        titlecase

                                        number
                                        currency
                                        date
                                        json
                                        
                                        async

                                Custome Pipes
                                       @Pipe({
                                                
                                        })
                                        class P1{

                                        }
                        Service
                                       @Injectable({
                                                
                                        })
                                        class S1{

                                        }

        Angular Forms
        ------------------------------------------------

                Template Driven Forms                           
                        FormsModule
                                NgForm
                                NgModel

                        Most of the form is written in the template,
                        a very little or almost no control over the form, we have programatically.

                        Recommended for small input senarios like,
                                login Forms
                                search forms ..etc.,

                        Not much testable.

                Model Driven Forms / Reactive Forms             
                        ReactiveFormsModule
                                FormGroup
                                FormControl
                        
                        Most of the form is written in the controller,
                        a lot of control over the form, we have programatically.

                        Recommended fro complicated senarios like
                                Registration Forms
                                Add/Update Resource Forms

                        Are highly testable.

        Routing
        ---------------------------------------------------------------------------

                RouterModule

                                <router-outlet></router-outlet>

                                Route   -->     path
                                                component
                                                pathMatch               full/startWith
                                                children
                                                redirectTo
                                
                                Routes  ---> an array of Route

                                <a routerLink="path">link</a>

                                Router  is a inbuilt service to facilitate 
                                                programatically navigate.

                                        navigateByUrl('/emps/list');
                                        navigate(['/emps','/list']);

                                ActivatedRoute  --> is a inbuilt service that gives data
                                                        about Routes.

                                        .snapshot
                                                .params         is an object of path params
                                                .queryParams    is an object of qry params
                                                .url            gives the current url.


        RxJS
        ----------------------------------------------------------------------------------------------

                is a javascript that supports reactive programming.


                An Application will have two types of operations,
                        1. Long time consuming operations
                                        heavly loops,
                                        sending req to a server and receving data from the server .,.etc

                        2. Short operations
                                        all other sorts of operations.
                
                Time Consuming operations must be done asynchronously, because we can 
                not let the ui struct dowbn until the time consuming job is compelte.,

                Synchronous way of doing 
                ------------------------------------------------
                UI      a save button is clicked
                                1. send data tot he server
                                2. wait until server responds
                                3. if server responds positivly, display success message
                                        or server gives error, display error message

                 Asynchronous way of doing 
                ------------------------------------------------
                UI      a save button is clicked
                                1. send data to the server
                                        |
                                ----------------------
                                |                    | asynchronously wait for the server
                                display                                 |
                                a progress bar/                         | when server responds
                                a wating message /                              |
                                a small iamge                                   | notify the ui
                                                                                |
                                        -----------------------------------------
                                        |
                                       if server responds positivly, display success message
                                        or server gives error, display error message 


                ES6                     Promise

                RxJS                    Observable                      enhanced Promise


                                        let job = function(observer){
                                                
                                                ................
                                                ...................
                                                observer.next(val); //to emit resultant values of the job.
                                                observer.erro(err); //to signal the job encoutered an err
                                                observer.complete(); //ti indicate the job is compelte.
                                                ........................

                                        }

                                        let ob = new Observable(job);

                                        ob.subscribe(
                                                (value) => {}, //called in resposne to obeserver.next
                                                (err) => {}, //called in response to observer.error
                                                () => {} //called in response to observer.complete
                                        );

                                        ob.unsubscribe();

        Angular LifeCycle & Hooks
       --------------------------------------------------------------------------------------

        constructor
        ngOnChanges                      when the data-bound property variations happen (form control gets renewed )
        ngOnInit                         When Angular has completed the creation and introduction of components
        ngDoCheck                        whenever there is a vitality to review the input property of a component or directive
                ngAfterContentInit      when every content of the components gets introduced and checked for the first time
                ngAfterContentChecked   
                ngAfterViewInit
                ngAfterViewChecked
        ngOnDestroy



        HttpClientModule
        --------------------------------------------------------------------------

                all requried services and helpers
                to communicate witha  REST api.


                        HttpClient
                                        get(apiUrl)             : Observable
                                        post(apiUrl,reqBody)    : Observable
                                        put(apiUrl,reqBody)     : Observable
                                        delete(apiUrl)          : Observable

        Modularization
        --------------------------------------------------------------------------------------
        Domain: A domain NgModule is organized around a feature, business domain, or user experience.
        Routed: The top component of the NgModule acts as the destination of a router navigation route.
        Routing: A routing NgModule provides the routing configuration for another NgModule.
        Service: A service NgModule provides utility services such as data access and messaging.
        Widget: A widget NgModule makes a component, directive, or pipe available to other NgModules.
        Shared: A shared NgModule makes a set of components, directives, and pipes available to other NgModules.

                NgModule	Declarations	Providers	Exports	        Imported by
                ------------------------------------------------------------------------------
                Domain	        Yes	        Rare	        Top component	Another domain, AppModule
                Routed	        Yes	        Rare	        No	        None
                Routing	        No	        Yes (Guards)	RouterModule	Another domain (for routing)
                Service	        No	        Yes	        No	        AppModule
                Widget	        Yes	        Rare	        Yes	        Another domain
                Shared	        Yes	        No	        Yes	        Another domain

      