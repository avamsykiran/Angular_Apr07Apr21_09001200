https://github.com/avamsykiran/Angular_Apr07Apr21_09001200.git

Pre Requsites
-------------------------------
    Html 5
            Elements And Attributes
            Web Storage
            Form Elements and Validations

    Css
            Css Style Properties
            Selectors

    Bootstrap (optional)
            Grid System
            Typography
            Alerts, Crads, Navbar ..etc

    JavaScript (ES6)
            Sugar Syntax
                Moduels
                Classes
                Prototypes
                Closures
                Arrow Functions
                Tempalte Literals
            
            Promise
            Data,String,Math and Object API
            Array Prototype API

    Angular 11
    ----------------------------------------------------------------------------------------------------

        Lab Setup
            VS Code                         IDE
            NodeJS                          Development Platform        https://nodejs.org/en/
                                                    node --version
            NPM (node package manager)      Build Tool
                                                    npm --version

            Angular CLI (CmdLineInterface)  Angular Development Tool
                                                    ng --version

                                                    npm install -g @angular/cli

            Chrome                          Browser

        -=--=-=-=-=-=-=-==-=-=-=-=-=-==-=--===-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Dynamic Web Appliction

        Database <-->  [ DAL  <--> Service <--> Controller <--> View (JSP/ASP/PHP) ]  <--Html+CSS+JS---> Client

        SPA     Single Page Application

                         [ SPA                                          ]  <--Html+CSS+JS---> Client

        Database <-->  [ DAL  <--> Service <--> Controller (WebService) ]  <--Data (xml/json)---> Client

        -=--=-=-=-=-=-=-==-=-=-=-=-=-==-=--===-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Typescript
                    = Javascript (ES6) + TypeSafety.


                    Javascript
                            const sayHello = (unm) => {
                                console.log(unm.length);
                                return "Hello " + unm;
                            };

                            sayHello("Vamsy");
                            sayHello(123);
                            sayHello(true);
                            sayHello({id:1,title:"Apples",price:2345});

                    Typescript
                            const sayHello = (unm:string) => {            
                                console.log(unm.length);
                                return "Hello " + unm;
                            };
                            
                            sayHello("Vamsy");

                    DataTypes
                                any
                                string
                                number
                                boolean
                                array           []
                                void
                                undefined
                                null

                             Interface
                                = data members +
                                     absctract functions

     
        -=--=-=-=-=-=-=-==-=-=-=-=-=-==-=--===-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Angular Archetecture

                        Modules
                        Component
                        Directives
                        Pipes
                        Services
                        Gaurds
                        Interceptors

        Angular CLI Commands

                        ng new proj-name
                               .browserslistrc         list of brosers to be supproted
                               .gitignore
                                angular.json           angular cli config         
                                package.json           npm config
                                tsconfig.app.json
                                tsconfig.json          ts config
                                tslint.json            lint config
                                karma.conf.js          karma config
                                e2e                    end-to-end test cases using protractor.
                                node_modules           all dewnlaoded libraries
                                src                    source code

                        ng build
                                to compile and bundle your projects

                                vendor.js               contains all code of thrid party lib..
                                                                all angular librries
                                                                + rxjs + any other thrid party
                                                                JS lib

                                polyfills.js            support for advanced es fetures
                                                                for older browsers
                              
                                main.js                 contains the code written in this 
                                                        spa.

                                runtime.js              support for modules in older browsers

                        ng serve
                                do a continuos build and host in a dev server.
                                4200 default port for dev server.

                                ng serve --port 8989 -o

                        ng generate
                        ng g

                                ng g component componentName    --skip-tests
                                ng g module moduleName
                                ng g directive directiveName
                                ng g pipe pipeName
                                ng g service serviceName
                                ng g class className
                                ng g guard guardName
                                ng g interface interfaceName

                        ng add library-name

      -=--=-=-=-=-=-=-==-=-=-=-=-=-==-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Angular Archetecture In details

                each of the below angular resoruce is a class.
                the class is amrked with a decorator and the decorators accepts
                a few parameters called meta-data. Through these decorators
                we can recognize what resource is represented a givben class.

                        Module
                                        a logical group of component,
                                        directives,pipes,gaurds,services 
                                        and other angular modules.

                                        @NgModule({
                                                declarations:[
                                                 //list of component,directives,pipes that belong to this module.
                                                ],
                                                imports:[
                                                        //list of sub-moudles to be included in this module
                                                ],
                                                exports:[
                                                 //list of component,directives,pipes that are allowed to be used by
                                                 //other moduelss
                                                ],
                                                providers:[
                                                        //list of services and interceptors.
                                                ],
                                                bootstrap:[
                                                        //list of components whose object must be created
                                                        //immediatly after loading the module.
                                                ]
                                        })
                                        class M1{

                                        }

                                        1. an angular project can have any number of modules
                                        2. one angular proj can have only one top-level module
                                        and that top-level is called root modules and all
                                        other sub-modules are called Feature modules.
                        Component

                                        angular allows html extendability.
                                        angualr allows to define new elements in html.
                                        thats what is a component.

                                        component is a new html tag.
                                        component = Controller + Template + Style
                                                        Controller will hold state and behaviour of the component
                                                                                data and actions
                                                        Template will hold the presentation of the component
                                                        Style will hold local css of the component

                                        c1.component.ts
                                        -----------------------
                                        @Component({
                                                selector:'app-welcome',
                                                tempalteUrl:'c1.component.html',
                                                styleUrls:['c1.component.css']
                                        })
                                        class C1{
                                           title : string;
                                           constructor(){
                                                   this.title = "Hello Welcome all"; //state
                                           }
                                        }

                                        c1.component.html
                                        -----------------------------
                                        <h1>{{title}}</h1>

                                        c1.component.css
                                        ------------------------------
                                        h1{
                                                text-align:center;
                                        }

                                        <app-welcome></app-welcome>


                                        Data Binding
                                        -----------------------------------------

                                        Interpolation
                                                        {{angular-expression.}}
                                        
                                        One-Way Data Binding
                                                        [attrib]="angular-expression"

                                        Event Binding
                                                        (eventAttribute)="function()"

                                                        onclick         click
                                                        ondblclick      dblclick
                                                        onblur          blur
                                        
                                        Two Way Data Binding
                                                        
                                                        [(ngModel)]="variables"

                                                        FormsModule

                                        Style Binding

                                                        [class]="variable"
                                                        [class]="{className:true,class2:false}"

                        Directive

                                        Directive / Attribute Directives
                                                        are user-defiend html attributes .

                                        InBuilt Attribute Directives

                                                Event Directives
                                                        click
                                                        dblclick
                                                        blur
                                                        focus
                                                        change
                                                        submit
                                                        ngSubmit
                                                
                                                Structural Directives
                                                        *ngIf
                                                        *ngFor
                                                        *ngSwitch

                                                Other InBuilt Directives
                                                        ngModel
                                                        formControlName
                                                        routerLink
                                                                        .........etc.,

                                        Custome Directives
                                                @Directive({
                                                        
                                                })
                                                class D1{

                                                }

                        Pipe

                                pipes are used to tranform a given
                                value to another before rendering.

                                {{value|pipeName:param1:param2}}

                                InBuilt Pipes
                                        uppercase
                                        lowercase
                                        titlecase

                                        number
                                        currency
                                        date
                                        json
                                        
                                        async

                                Custome Pipes
                                       @Pipe({
                                                
                                        })
                                        class P1{

                                        }
                        Service
                                       @Injectable({
                                                
                                        })
                                        class S1{

                                        }

        Angular Forms
        ------------------------------------------------

                Template Driven Forms                           
                        FormsModule
                                NgForm
                                NgModel

                        Most of the form is written in the template,
                        a very little or almost no control over the form, we have programatically.

                        Recommended for small input senarios like,
                                login Forms
                                search forms ..etc.,

                        Not much testable.

                Model Driven Forms / Reactive Forms             
                        ReactiveFormsModule
                                FormGroup
                                FormControl
                        
                        Most of the form is written in the controller,
                        a lot of control over the form, we have programatically.

                        Recommended fro complicated senarios like
                                Registration Forms
                                Add/Update Resource Forms

                        Are highly testable.

        Routing
        ---------------------------------------------------------------------------

                RouterModule

                                <router-outlet></router-outlet>

                                Route   -->     path
                                                component
                                                pathMatch               full/startWith
                                                children
                                                redirectTo
                                
                                Routes  ---> an array of Route

                                <a routerLink="path">link</a>

                                Router  is a inbuilt service to facilitate 
                                                programatically navigate.

                                        navigateByUrl('/emps/list');
                                        navigate(['/emps','/list']);

                                ActivatedRoute  --> is a inbuilt service that gives data
                                                        about Routes.

                                        .snapshot
                                                .params         is an object of path params
                                                .queryParams    is an object of qry params
                                                .url            gives the current url.


        RxJS
        ----------------------------------------------------------------------------------------------

                is a javascript that supports reactive programming.


                An Application will have two types of operations,
                        1. Long time consuming operations
                                        heavly loops,
                                        sending req to a server and receving data from the server .,.etc

                        2. Short operations
                                        all other sorts of operations.
                
                Time Consuming operations must be done asynchronously, because we can 
                not let the ui struct dowbn until the time consuming job is compelte.,

                Synchronous way of doing 
                ------------------------------------------------
                UI      a save button is clicked
                                1. send data tot he server
                                2. wait until server responds
                                3. if server responds positivly, display success message
                                        or server gives error, display error message

                 Asynchronous way of doing 
                ------------------------------------------------
                UI      a save button is clicked
                                1. send data to the server
                                        |
                                ----------------------
                                |                    | asynchronously wait for the server
                                display                                 |
                                a progress bar/                         | when server responds
                                a wating message /                              |
                                a small iamge                                   | notify the ui
                                                                                |
                                        -----------------------------------------
                                        |
                                       if server responds positivly, display success message
                                        or server gives error, display error message 


                ES6                     Promise

                RxJS                    Observable                      enhanced Promise


                                        let job = function(observer){
                                                
                                                ................
                                                ...................
                                                observer.next(val); //to emit resultant values of the job.
                                                observer.erro(err); //to signal the job encoutered an err
                                                observer.complete(); //ti indicate the job is compelte.
                                                ........................

                                        }

                                        let ob = new Observable(job);

                                        ob.subscribe(
                                                (value) => {}, //called in resposne to obeserver.next
                                                (err) => {}, //called in response to observer.error
                                                () => {} //called in response to observer.complete
                                        );

                                        ob.unsubscribe();

        Angular LifeCycle & Hooks
       --------------------------------------------------------------------------------------

        constructor
        ngOnChanges                      when the data-bound property variations happen (form control gets renewed )
        ngOnInit                         When Angular has completed the creation and introduction of components
        ngDoCheck                        whenever there is a vitality to review the input property of a component or directive
                ngAfterContentInit      when every content of the components gets introduced and checked for the first time
                ngAfterContentChecked   
                ngAfterViewInit
                ngAfterViewChecked
        ngOnDestroy

        HttpClientModule
        --------------------------------------------------------------------------

                all requried services and helpers
                to communicate witha  REST api.


                        HttpClient
                                        get(apiUrl)             : Observable
                                        post(apiUrl,reqBody)    : Observable
                                        put(apiUrl,reqBody)     : Observable
                                        delete(apiUrl)          : Observable

        Modularization
        --------------------------------------------------------------------------------------
        Domain: A domain NgModule is organized around a feature, business domain, or user experience.
        Routed: The top component of the NgModule acts as the destination of a router navigation route.
        Routing: A routing NgModule provides the routing configuration for another NgModule.
        Service: A service NgModule provides utility services such as data access and messaging.
        Widget: A widget NgModule makes a component, directive, or pipe available to other NgModules.
        Shared: A shared NgModule makes a set of components, directives, and pipes available to other NgModules.

                NgModule	Declarations	Providers	Exports	        Imported by
                ------------------------------------------------------------------------------
                Domain	        Yes	        Rare	        Top component	Another domain, AppModule
                Routed	        Yes	        Rare	        No	        None
                Routing	        No	        Yes (Guards)	RouterModule	Another domain (for routing)
                Service	        No	        Yes	        No	        AppModule
                Widget	        Yes	        Rare	        Yes	        Another domain
                Shared	        Yes	        No	        Yes	        Another domain



        Interceptors
        -----------------------------------------------------------------------------

                is any thing that lies inbetween a conversation.

                angular-app (HttpClient) --REQ--> Interceptors ---REQ-----> REST API
                angular-app (HttpClient) <--RESP-- Interceptors <---RESP--- REST API   


        Router Gaurds
        -----------------------------------------------------------------

                 a router gaurd is an interface
                 that offer a bollean returning function.

                        CanActivate

                                if returns true, the respective route
                                can be entered or else it can not be.

                        CanDeactivate
                        
                                if returns true, the respective route
                                can be left to another route
                                or else we can not leave from that route.
                        
                        CanChildActivate
                                
                                if returns true, the child routes of
                                the respective parent route
                                can be entered or else they can not be.

                        CanLoad
                                if returns true, the lazy loadable module
                                can be loaded or else it can not be.

                        A single class can implement any 
                        number of guards.

                        Each route can have any number of
                        guards pur on it, when a route is 
                        gaurded by multiple guards, all of the
                        guards but return true for that route to work,
                        if any on of the guards resolve false, that route
                        wont work. 


        Angular Features Version Wise
        -------------------------------------

    Angular 2
        Released in 2016
        Complete rewrite of Angular 1
        Written entirely in typescript
        Component-based instead of Controller
        ES6 and typescript supported
        More testable as component-based
        Support for Mobile/Low-end devices
        Up to typescript 1.8 is supported

    Angular 3:
        Why we don’t have Angular 3?
        — Angular is being developed in a MonoRepo it means a single repo for everything. @angular/core, @angular/compiler, @angular/router etc are in the same repo and may have their own versions.
        — The angular router was already in v3 and releasing angular 3 with router 4 will create confusion
        — To avoid this confusion they decided to skip the version 3 and release with version 4.0.0 so that every major dependency in the MonoRepo are on the right track.

    Angular 4
        Released in 2017
        Changes in core library
        Angular 4 is simply the next version of angular 2, 
        the underlying concept is the same & is an inheritance from Angular 2
        Lot of performance improvement is made to reduce size of compiler generated code
        Typescript 2.1 & 2.2 compatible 
            — all feature of ts 2.1 & 2.2 are supported in Angular 4 application
        Animation features are separated from @angular/core to @angular/animation
            — don’t import @animation packages into the application to reduce bundle size 
            and it gives the performance improvement.       
        Else block in *ngIf introduced:
            — Instead of writing 2 ngIf for else , 
            simply add below code in component template:
                *ngIf=”yourCondition; else myFalsyTemplate”
                <ng-template #myFalsyTemplate>Else Html</ng-template>

    Angular 5
        Released 1st November 2017
        Build optimizer: It helps to remove unnecessary code from application
        Angular Universal State Transfer API and DOM Support 
            — By using this feature, we can now share the state of the application 
                between the server side and client side very easily.
        Compiler Improvements: 
            This is one of the very nice features of Angular 5, 
            which improved the support of incremental compilation of an application.
        Preserve White space: 
            To remove unnecessary new lines, tabs and white spaces we can 
            add below code(decrease bundle size)
                // in component decorator you can now add:
                    “preserveWhitespaces: false”
                // or in tsconfig.json:
                    “angularCompilerOptions”: { “preserveWhitespaces”: false}`

        Increased the standardization across all browsers: 
            For internationalization we were depending on `i18n` , 
            but in ng 5 provides a new date, number, and currency pipes 
            which increases the internationalization across all the browsers 
            and eliminates the need of i18n polyfills.
        
        exportAs: In Angular 5, multiple names support for both directives and components
        HttpClient: 
            until Angualar 4.3 @angular/HTTP was been used which is now 
            depreciated and in Angular 5 a new module called HttpClientModule is 
            introduced which comes under @angular/common/http package.
        
        Few new Router Life-cycle Events being added in Angular 5: 
            In Angular 5 few new life cycle events being added to the router and those are:
                ActivationStart, ActivationEnd, ChildActivationStart, ChildActivationEnd, 
                GuardsCheckStart, GuardsCheckEnd, ResolveStart and ResolveEnd.

        Angular 5 supports TypeScript 2.3 version.
            Improved in faster Compiler support:
            A huge improvement made in an Angular compiler to make the development 
            build faster. We can now take advantage of by running the below command 
            in our development terminal window to make the build faster.

            ng serve/s — aot
    
    Angular 6
            Released on April 2018
            This release is focused less on the underlying framework, 
            and more on tool-chain and on making it easier to move quickly with angular 
            in the future

            No major breaking changes
            
            Dependency on RxJS 6 (this upgrade have breaking changes but CLI 
            command helps in migrating from older version of RxJS)

            Synchronizes major version number of the:
                — Angular framework
                — Angular CLI
                — Angular Material + CDK

                All of the above are now version 6.0.0, 
                
            Remove support for <template> tag and “<ng-template>” should be used.

            Registering provider: To register new service/provider, 
            we import Service into module and then inject in provider array. e.g:
            
            // app.module.ts
                import {MyService} from './my-service';
                    ...
                    providers: [...MyService]
                    ... 

            But after this upgrade you will be able to add providedIn property 
            in injectable decorator. e.g:
            
            // MyService.ts
            @Injectable({ providedIn: 'root'})
            export class MyService{}
                
            CLI Changes: Two new commands have been introduced
            
            — ng update <package>
            * Analyse package.json and recommend updates to your application
            * 3rd parties can provide update scripts using schematics
            * automatically update code for breaking changes
            * staying update and low maintenance
        
            — ng add
            * add new capablities to your applicaiton
            * e.g ng add @angular/material : 

    Angular 7:
            Released on October 2018
            This is a major release and expanding to the entire platform including-
            — Core framework,
            — Angular Material,
            — CLI
            
            CLI Prompts: 
            The CLI will now prompt users as when running common commands 
            like ng new or ng add @angular/material with the intend o
            f getting aid for building a new project using SCSS.

            Added a new interface — UrlSegment[] to CanLoad interface
            Added a new interface — DoBootstrap interface

            Angular 7 added a new compiler — Compatibility Compiler (ngcc)
            Introduce a new Pipe called — KeyValuePipe
            Angular 7 now supporting to TypeScript 2.9.
            Added a new elements features — enable Shadow DOM v1 and slots
            Added a new router features — warn if navigation triggered outside Angular zone
            Added a new mapping for ngfactory and ngsummary files to their module names in AOT summary resolver.
            Added a new “original” placeholder value on extracted XMB
            Added a new ability to recover from malformed URLs
            Added a new compiler support dot (.) in import statements and also avoid a crash 
            in ngc-wrapped
            Update compiler to flatten nested template fns

    Angular 8:
        Released April 2019
        Being smaller, faster and easier to use and it will be making Angular developers life easier.
        Added Support for TypeScript 3.2
        Added a Navigation Type Available during Navigation in the Router
        Added pathParamsOrQueryParamsChange mode for runGuardsAndResolvers in the Router
        Allow passing state to routerLink Directives in the Router
        Allow passing state to NavigationExtras in the Router
        Restore the whole object when navigating back to a page managed by Angular Router
        Added support for SASS
        Resolve generated Sass/Less files to .css inputs
        Added Predicate function mode for runGuardsAndResolvers:-
            This option means guards and resolvers will ignore changes when a provided predicate function returns `false`. This supports use cases where an application needs to ignore some param updates but not others. For example, changing a sort param in the URL might need to be ignored, whereas changing the `project` param might require a re-run of guards and resolvers.
        Added functionality to mark a control and its descendant controls as touched: — add markAllAsTouched () to AbstractControl

     Angular 9
        IVY Presented as the Default Compiler
        More Consistent ng-update
        API Extractor Updates
        Fresh and new alternatives for ‘providedIn’
        IDE and Language Service Enhancements
        Typescript 3.7 Updates
        Component Harness
        Angular Core Type-Safe Alterations

     Angular 10
        Language Service
        Compiler Update
        New Default Browser Configuration
        Optional Stricter Settings
        Ngcc
        Performance Improvements
        Typescript 3.9, TSLib 2.9 & TSLint v6
        Localization
        Converting pre-Ivy code

      Angular 11
        Updated Hot Module Replacement (HMR) Support
        Updates on Operation Byelog
        Automatic Inlining of Fonts
        Component Test Harnesses
        Updated Language Service Preview
        Faster Builds
        Experimental Webpack 5 Support
        Moving to ESLint
        
Token Based authentication
----------------------------------------

1. request for an access
    Audence request for an access to the Theater
    the theter demands some money

    UI request for an access to a BackEndServer
    the BackEndServer demands some identity (pubKey+privKey)

2. Once the demand is met, we need a proof of authentication...

        The theter issue a ticket to the Audence

        the BackEndServer issues a token (JWT) to the UI

3. UI has to preserve the token for furthur access jsut like
    the Audence has to preserve the ticket.

4. Audence should submit the ticket, each time a proof of authentication 
is demandded to access any part of the theater

    UI should send the Token along with any other request
    to be fulfilled or responded by the BackEndServer

Json Server Auth
-------------------------------

      /register
      /signup

      /login  
      /signin

    Owner    
    LoggedIn
    Anonymous/public

    the object whose userId property matches
    with the id of a user is said to be owned by that user.

    Unix Security kind of thing to provide access control

    No Access                 =  0
    Read Permission           =  2
    Write Permission          =  4
    Read and Write Permission =  6    


    accessCode = OUP        000 to 666

        620         owner is allowed with read and Write
                    LoggedIn user allowed only to read
                    Public users have no permission at all.

Jasmine is a javascript testing library
============================================================
    describe        create a test suite.
    it              create a test case.
    beforeEach      setup method
    afterEach       teardown method

    describe("test naem ad description",()=>{
        //all test cases will go
        //this is the suite

        before(()=>{
            //this execute before 
            //executing each test case
        });

        after(()=>{
            //this execute after
            //executing each test case
        });

        it("test case name or description",()=>{
            //your test case
        });

        describe("a sub test suite",()=>{
            //more test cases.
        });
    });

        Jasmine matcher
        -------------------------------

            expect(testexpression) //create a matcher

                toBe
                toEqual
                tobeTruthy
                toBeFalse
                toBeNull
                toBeUndefiend
                ...etc
            
            expect(2*2).toBe(4);

Karma
----------------------------------
        is an angular testing platform which supports or supplies
        resource to jasmin for testing.

        Karma will runt he tet cases as and when the code gets modified
        and alkso generates the test reports on chrome...!
